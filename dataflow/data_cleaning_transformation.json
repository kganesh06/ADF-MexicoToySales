{
	"name": "data_cleaning_transformation",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_adls_prodcuts",
						"type": "DatasetReference"
					},
					"name": "getProducts"
				},
				{
					"dataset": {
						"referenceName": "ds_adls_sales",
						"type": "DatasetReference"
					},
					"name": "getSales"
				},
				{
					"dataset": {
						"referenceName": "ds_adls_Inventory",
						"type": "DatasetReference"
					},
					"name": "getInventory"
				},
				{
					"dataset": {
						"referenceName": "ds_adls_store",
						"type": "DatasetReference"
					},
					"name": "getStores"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_adls_processdata_products",
						"type": "DatasetReference"
					},
					"name": "processdata"
				},
				{
					"dataset": {
						"referenceName": "ds_adls_processdata_sales",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "ds_adls_processdata_inv",
						"type": "DatasetReference"
					},
					"name": "sink2"
				},
				{
					"dataset": {
						"referenceName": "ds_adls_processdata_stores",
						"type": "DatasetReference"
					},
					"name": "sink3"
				}
			],
			"transformations": [
				{
					"name": "removeNullValues"
				},
				{
					"name": "replacenulls"
				},
				{
					"name": "removeNullSales"
				},
				{
					"name": "join1"
				},
				{
					"name": "select1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "join2"
				},
				{
					"name": "select2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Product_ID as string,",
				"          Product_Name as string,",
				"          Product_Category as string,",
				"          Product_Cost as double,",
				"          Product_Price as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     skipLines: 1) ~> getProducts",
				"source(output(",
				"          Sale_ID as short,",
				"          Date as date 'dd/MM/yyyy',",
				"          Store_ID as short,",
				"          Product_ID as short,",
				"          Units as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     skipLines: 1) ~> getSales",
				"source(output(",
				"          Store_ID as short,",
				"          Product_ID as short,",
				"          Stock_On_Hand as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     skipLines: 1) ~> getInventory",
				"source(output(",
				"          Store_ID as short,",
				"          Store_Name as string,",
				"          Store_City as string,",
				"          Store_Location as string,",
				"          Store_Open_Date as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     skipLines: 1) ~> getStores",
				"getProducts filter(not(((isNull(Product_ID)) || isNull(Product_Name) || Product_ID==\"\" || Product_Name==\"\"))) ~> removeNullValues",
				"removeNullValues derive(Product_Cost = iif(isNull(Product_Cost), toDouble(0), Product_Cost)) ~> replacenulls",
				"getSales filter(not(isNull(Sale_ID) || Sale_ID==\"\")) ~> removeNullSales",
				"derivedColumn1, replacenulls join(getSales@Product_ID == getProducts@Product_ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          Sale_ID,",
				"          Date,",
				"          Store_ID,",
				"          Product_ID = getSales@Product_ID,",
				"          Units,",
				"          Product_Cost,",
				"          Product_Price",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"removeNullSales derive(Date = toDate(regexReplace(toString(Date), '[a-zA-Z]+',''))) ~> derivedColumn1",
				"select1 derive(TotalSales = toDouble(Units) * Product_Price,",
				"          CostPerSale = toDouble(Units) * Product_Cost) ~> derivedColumn2",
				"derivedColumn2 derive(ProfitPerSale = TotalSales - CostPerSale) ~> derivedColumn3",
				"getStores aggregate(groupBy(Store_ID),",
				"     count = count(Store_ID)) ~> aggregate1",
				"aggregate1 filter(count == 1) ~> filter1",
				"filter1, getStores join(aggregate1@Store_ID == getStores@Store_ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2 select(mapColumn(",
				"          Store_ID = getStores@Store_ID,",
				"          Store_Name,",
				"          Store_City,",
				"          Store_Location,",
				"          Store_Open_Date",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"replacenulls sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['products.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> processdata",
				"derivedColumn3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['sales.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1",
				"getInventory sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['inventory.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink2",
				"select2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink3"
			]
		}
	}
}